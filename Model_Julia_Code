    ############################################################
    #######  Temperature rise and maximum trophic level  #######
    #######             Jean P. Gibert,  2018            #######
    ############################################################

# Loading JULIA packages (Julia needs to be started as Julia -p # where # is the number of cores to be used)
    #@everywhere enables multithreading
#@everywhere using Pkg
@everywhere using Distributed
@everywhere using SharedArrays
@everywhere using DifferentialEquations
@everywhere using RCall
@everywhere using StatsBase

# Loading R packages
R"
library('RColorBrewer')
"


#######################################################################################################################################
## Baseline models and general understanding


## Baseline model (NO Temperature), just the underlying dynamics
@everywhere function LV_model_no_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*u[1]*(1-u[1]/p[2]) - p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1])
    # C
    du[2] = p[6]*p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[9]*u[2] - p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2])
    # T
    du[3] = p[7]*p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]) + p[8]*p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2]) - p[10]*u[3]
end

# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2]

p = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4];

u0 = [2.0;1;1;1;1;1];   # [R,C1,C2,a_RC1,a_RC2,a_C1C2]
tspan = (0.0,10000);
    # Same here
prob_evol = ODEProblem(LV_model_no_T,u0,tspan,p);
sol_evol = solve(prob_evol,adaptive=false,dt=0.075);
# Prepare to plot
sol_evol=sol_evol(0:1:10000);
sol_evol=hcat(sol_evol...)';
times=collect(range(0,stop=10000,length=10001));
burnin=4000;

R"
dev.new()
# Fig 1 A

plot($times,$sol_evol[,1],ylab='s',lwd=2, col='green', type='l', ylim=c(0,5))
lines($times,$sol_evol[,2],ylab='s',lwd=2, col='yellow')
lines($times,$sol_evol[,3],ylab='s',lwd=2, col='blue')

"


## Model with TEMPERATURE
## The baseline model assumes that only death rates can change with temperature.

## Baseline model
@everywhere function LV_model_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*u[1]*(1-u[1]/p[2]) - p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1])
    # C
    du[2] = p[6]*p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2]) -
                    p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]) + p[8]*p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2]) -
                    p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end

# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp]

p = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4,0.65,0.65,25,28];


#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C1,C2,a_RC1,a_RC2,a_C1C2]
tspan = (0.0,10000);
    # Same here
#prob_evol = ODEProblem(pf_evol,u0,tspan);
prob_evol = ODEProblem(LV_model_T,u0,tspan,p);
sol_evol = solve(prob_evol,adaptive=false,dt=0.075);
# Prepare to plot
sol_evol=sol_evol(0:1:10000);
sol_evol=hcat(sol_evol...)';
times=collect(range(0,stop=10000,length=10001));
burnin=4000;

R"
dev.new()
# Fig 1 A

plot($times,$sol_evol[,1],ylab='s',lwd=2, col='green', type='l', ylim=c(0,5))
lines($times,$sol_evol[,2],ylab='s',lwd=2, col='yellow')
lines($times,$sol_evol[,3],ylab='s',lwd=2, col='blue')

"

#######################################################################################################################################
## ACTUAL RUNS BELOW


##------------------------------------------------------------------------------------------------------------------------------------
## 1) Only death rates are Temperature-dependent

## Baseline model
## The baseline model assumes that only death rates can change with temperature.

@everywhere function LV_model_death_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/p[2]) - p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[5]*u[2]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2]) -
                    p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2]) + p[8]*p[5]*u[2]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2]) -
                    p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp]


###
# Differences in density with Temperature across Temperature sensitivity
Temp = collect(range(25,stop=30,length=12));
Ea_Pred = collect(range(0,stop=0.6,length=100));
Pred_mean = SharedArray{Float64}(12,100);
Pred_max_1 = SharedArray{Float64}(12,100);
Pred_min_1 = SharedArray{Float64}(12,100);
Int_mean = SharedArray{Float64}(12,100);
Int_max_1 = SharedArray{Float64}(12,100);
Int_min_1 = SharedArray{Float64}(12,100);
Res_mean = SharedArray{Float64}(12,100);
Res_max_1 = SharedArray{Float64}(12,100);
Res_min_1 = SharedArray{Float64}(12,100);
TL = SharedArray{Float64}(12,100);
TL_mean = SharedArray{Float64}(12,100);
Prop_CT = SharedArray{Float64}(12,100);
Prop_RT = SharedArray{Float64}(12,100);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5 
@time  for i in 1:12
    @sync @distributed for j in 1:100 # @sync and @distributed actually does the multithreading. needs @everywhere used as above

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp]
        p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,Ea_Pred[j],25,Temp[i]];
        prob_1 = ODEProblem(LV_model_death_T,u0,tspan,p_1)
        sol_1 = solve(prob_1, adaptive=false,dt=0.075)

        # We ask whether every species is alive in the last time step of "sol"
        sol_plot_1 = hcat(sol_1.u...)'

        # Store mins and max
        Pred_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);
        Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);
        Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);
        Int_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);
        Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);
        Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);
        Res_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);
        Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);
        Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);

        ## NO NEED to calculate this inside the loop as it can be calculated using element-wise operations outside the loop
        # Calculate TL for top predator following previous studies
        #TL[i,j] = 1 + (p[7]*p[4]*Res_max_1[i,j]*Int_max_1[i,j]/(1+p[4]*p[12]*Res_max_1[i,j]))/(p[7]*p[4]*Res_max_1[i,j]*Int_max_1[i,j]/#(1+p[4]*p[12]*Res_max_1[i,j]) + p[8]*p[5]*Int_max_1[i,j]*Pred_max_1[i,j]/(1+p[5]*p[13]*Int_max_1[i,j])) + #2*(p[8]*p[5]*Int_max_1[i,j]*Pred_max_1[i,j]/(1+p[5]*p[13]*Int_max_1[i,j]))/(p[7]*p[4]*Res_max_1[i,j]*Int_max_1[i,j]/#(1+p[4]*p[12]*Res_max_1[i,j]) + p[8]*p[5]*Int_max_1[i,j]*Pred_max_1[i,j]/(1+p[5]*p[13]*Int_max_1[i,j]))

    end
        println(i) # for keeping track of where we are at
end

p = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.65,25,28];

# Calculates TL a posteriori following previous studies
TL = 1 .+ (p[7].*p[4].*Res_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1))./(p[7].*p[4].*Res_max_1.*Pred_max_1./(1 .+p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1) .+ p[8].*p[5].*Int_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1)) .+
 2*(p[8].*p[5].*Int_max_1.*Pred_max_1./(1 .+p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1))./(p[7].*p[4].*Res_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1) + p[8].*p[5].*Int_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1))

# Calculates TL a posteriori following previous studies
TL_mean = 1 .+ (p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) .+ p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean)) .+
 2*(p[8].*p[5].*Int_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) + p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))

# Calculates proportional contributions
# For top eating resources
Prop_RT = (p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) .+ p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))
# For top eating intermediate consumers
Prop_CT = (p[8].*p[5].*Int_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) + p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))

## Calculates the proportion of basal species
# Pass data to R
R"
Diff <- $Int_max_1 - $Pred_max_1
Diff_min <- $Int_min_1 - $Pred_min_1
Diff_mean <- $Int_mean - $Pred_mean
Prop_Basal <- $Res_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Int <- $Int_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Pred <- $Pred_mean /($Res_mean + $Int_mean + $Pred_mean)
Diff_Ea <- $Ea_Pred - 0.3

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(13)
"

#### PLOT RESULTS

# 1) Changes in densities and TL
## Both Low and Large K (Non-oscillatory, =5)
## CHANGES IN PROPORTIONS
R"
pdf('figfig.pdf', useDingbat=FALSE, width=5, height=11)
par(mfrow=c(3,1),oma=c(3,1.1,0,1.1),mar=c(2,6,2,2))

# Plot proportion basal
plot(Prop_Basal[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .7, 0))
axis(2,at=seq(0,2,0.25), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Top Ea - Consumer Ea',1, line=3.3, cex=1.8)
mtext('Proportion Basal',2,line=3.8, cex=1.8)
    # Plot proportion basal
for(i in 1:12){
    lines(Prop_Basal[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col=color[i+1], lty=2)
    }
    # Plot proportion Intermediate
for(i in 1:12){
    lines(Prop_Int[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col=color[i+1], lty=6)
    }
    # Plot Proportion top
for(i in 1:12){
    lines(Prop_Pred[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($TL_mean[1,] ~ Diff_Ea, pch=16,ylim=c(2.4,3),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .5, 0))
axis(2,at=c(2.5,2.75,3), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Top Ea - Consumer Ea',1, line=3, cex=1.8)
mtext('Trophic Level',2,line=3.8, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($TL_mean[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($Prop_RT[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .5, 0))
axis(2,at=c(0,0.5,1), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
mtext('Top Ea - Consumer Ea',1, line=3, cex=1.8)
mtext('Interaction Strengths',2,line=3.5, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($Prop_RT[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lty=2,lwd=3,  col=color[i+1])
    lines($Prop_CT[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lty=6,lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

dev.off()
"

##------------------------------------------------------------------------------------------------------------------------------------
## 2) Only attack rates are Temperature-dependent


## This model assumes that only the attack rates can change with temperature.

@everywhere function LV_model_attack_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[2]/(1+p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[11]*u[1]) -
            p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[2]/(1+p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[11]*u[1]) -
            p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[2]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2]) -
            p[9]*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2]) +
            p[8]*p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[2]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2]) -
            p[10]*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaCattR, 15 = EaTattR, 16 = EaTattC,17= Tref, 18=Temp]

###
# Differences in density with Temperature across Temperature sensitivity
Temp = collect(range(25,stop=30,length=12));
Ea_Pred = collect(range(0,stop=0.6,length=100));
Pred_mean = SharedArray{Float64}(12,100);
Pred_max_1 = SharedArray{Float64}(12,100);
Pred_min_1 = SharedArray{Float64}(12,100);
Int_mean = SharedArray{Float64}(12,100);
Int_max_1 = SharedArray{Float64}(12,100);
Int_min_1 = SharedArray{Float64}(12,100);
Res_mean = SharedArray{Float64}(12,100);
Res_max_1 = SharedArray{Float64}(12,100);
Res_min_1 = SharedArray{Float64}(12,100);
TL = SharedArray{Float64}(12,100);
TL_mean = SharedArray{Float64}(12,100);
Prop_CT = SharedArray{Float64}(12,100);
Prop_RT = SharedArray{Float64}(12,100);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5 
@time  for i in 1:12
    @sync @distributed for j in 1:100

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaCattR, 15 = EaTattR, 16 = EaTattC,17= Tref, 18=Temp]

        p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,Ea_Pred[j],Ea_Pred[j],25,Temp[i]];
        prob_1 = ODEProblem(LV_model_attack_T,u0,tspan,p_1)
        sol_1 = solve(prob_1, adaptive=false,dt=0.075)

        # We ask whether every species is alive in the last time step of "sol"
        sol_plot_1 = hcat(sol_1.u...)'

        # Store mins and max
        Pred_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);
        Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);
        Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);
        Int_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);
        Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);
        Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);
        Res_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);
        Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);
        Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);

        # Calculate TL for top predator following Gibert & Yeakel 2019
        TL[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j])) +
        2*(p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))

        # Calculate proportional contributions
        Prop_RT[i,j] = (p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))

        Prop_CT[i,j] = (p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))

    end
        println(i)
end

## Pass data to R
R"
Diff <- $Int_max_1 - $Pred_max_1
Diff_min <- $Int_min_1 - $Pred_min_1
Diff_mean <- $Int_mean - $Pred_mean
Prop_Basal <- $Res_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Int <- $Int_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Pred <- $Pred_mean /($Res_mean + $Int_mean + $Pred_mean)
Diff_Ea <- $Ea_Pred - 0.3

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(13)
"

#### PLOT RESULTS

# 1) Changes in densities and TL
## Both Low and Large K (Non-oscillatory, =5)
## CHANGES IN PROPORTIONS
R"
pdf('figfig.pdf', useDingbat=FALSE, width=5, height=11)
par(mfrow=c(3,1),oma=c(3,1.1,0,1.1),mar=c(2,6,2,2))

# Plot proportion basal
plot(Prop_Basal[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .7, 0))
axis(2,at=seq(0,2,0.25), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Top Ea - Consumer Ea',1, line=3.3, cex=1.8)
mtext('Proportion Basal',2,line=3.8, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines(Prop_Basal[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lty=2, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Int[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lty=6, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Pred[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

# Plot trophic level
plot($TL[1,] ~ Diff_Ea, pch=16,ylim=c(2.4,3),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .5, 0))
axis(2,at=c(2.5,2.75,3), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Top Ea - Consumer Ea',1, line=3, cex=1.8)
mtext('Trophic Level',2,line=3.8, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($TL[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

# Plot interaction strengths
plot($Prop_RT[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .5, 0))
axis(2,at=c(0,0.5,1), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
mtext('Top Ea - Consumer Ea',1, line=3, cex=1.8)
mtext('Interaction Strengths',2,line=3.5, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($Prop_RT[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lty=2, lwd=3,  col=color[i+1])
    lines($Prop_CT[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lty=6,lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

dev.off()
"


###----------------------------------------------------------------------------------------------------------------------------------
# 3) Death rates AND attack rates are temperature-dependent

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC]


###
# Differences in density with Temperature across Temperature sensitivity
Temp = collect(range(25,stop=30,length=12));
Ea_Pred = collect(range(0,stop=0.6,length=100));
Pred_mean_1 = SharedArray{Float64}(12,100);Pred_mean_2 = SharedArray{Float64}(12,100);Pred_mean_3 = SharedArray{Float64}(12,100);
Pred_max_1 = SharedArray{Float64}(12,100);Pred_max_2 = SharedArray{Float64}(12,100);Pred_max_3 = SharedArray{Float64}(12,100);
Pred_min_1 = SharedArray{Float64}(12,100);Pred_min_2 = SharedArray{Float64}(12,100);Pred_min_3 = SharedArray{Float64}(12,100);
Int_mean_1 = SharedArray{Float64}(12,100);Int_mean_2 = SharedArray{Float64}(12,100);Int_mean_3 = SharedArray{Float64}(12,100);
Int_max_1 = SharedArray{Float64}(12,100);Int_max_2 = SharedArray{Float64}(12,100);Int_max_3 = SharedArray{Float64}(12,100);
Int_min_1 = SharedArray{Float64}(12,100);Int_min_2 = SharedArray{Float64}(12,100);Int_min_3 = SharedArray{Float64}(12,100);
Res_mean_1 = SharedArray{Float64}(12,100);Res_mean_2 = SharedArray{Float64}(12,100);Res_mean_3 = SharedArray{Float64}(12,100);
Res_max_1 = SharedArray{Float64}(12,100);Res_max_2 = SharedArray{Float64}(12,100);Res_max_3 = SharedArray{Float64}(12,100);
Res_min_1 = SharedArray{Float64}(12,100);Res_min_2 = SharedArray{Float64}(12,100);Res_min_3 = SharedArray{Float64}(12,100);
TL_1 = SharedArray{Float64}(12,100);TL_2 = SharedArray{Float64}(12,100);TL_3 = SharedArray{Float64}(12,100);
TL_mean_1 = SharedArray{Float64}(12,100);TL_mean_2 = SharedArray{Float64}(12,100);TL_mean_3 = SharedArray{Float64}(12,100);
Prop_CT_1 = SharedArray{Float64}(12,100);Prop_CT_2 = SharedArray{Float64}(12,100);Prop_CT_3 = SharedArray{Float64}(12,100);
Prop_RT_1 = SharedArray{Float64}(12,100);Prop_RT_2 = SharedArray{Float64}(12,100);Prop_RT_3 = SharedArray{Float64}(12,100);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:12
    @sync @distributed for j in 1:100

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4,0.3,0.3,25,Temp[i],Ea_Pred[j],max(Ea_Pred[j]-0.1,0),max(Ea_Pred[j]-0.1,0)];
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.1,25,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j]];
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1)
            sol_1 = solve(prob_1, adaptive=false,dt=0.075)
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.3,25,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j]];
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2)
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.5,25,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j]];
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3)
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            # Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))


            ## NEED TO RECALCULATE THESE PROPORTIONS BASED ON NEW TL_S!
            # Calculates proportional contributions
            # For top eating resources
            Prop_RT_1[i,j] = (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))
            # For top eating intermediate consumers
            Prop_CT_1[i,j] = (p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            # For top eating resources
            Prop_RT_2[i,j] = (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))
            # For top eating intermediate consumers
            Prop_CT_2[i,j] = (p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            # For top eating resources
            Prop_RT_3[i,j] = (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))
            # For top eating intermediate consumers
            Prop_CT_3[i,j] = (p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(13)
"

#### PLOT RESULTS

# 1) Changes in densities and TL
## Low K (Non-oscillatory)
## While an increase in Attack rates can indeed compensate for an increase in death rates with Temperature, Temperature still mostly impacts top predators more strongly than intermediate predators, unless top predators respond to temperature by increasing predation rates much more than intermediate predators can. But even then, if top predators hammer down intermediate predators, they die off, so they are much more constrained than intermediate predators.

# Plot proportions
R"
pdf('figfig.pdf', useDingbat=FALSE, width=16, height=12)
par(mfcol=c(3,3),oma=c(3,3,0,1.1),mar=c(2,3,2,2))

# 1) For intermediate death rates smaller than top
plot(Prop_Basal_1[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .7, 0))
axis(2,at=seq(0,2,0.25), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Top Ea - Consumer Ea',1, line=2.7, cex=1.8)
mtext('Proportion Basal',2,line=3.8, cex=1.8)
    # Plot proportion basal
for(i in 1:12){
    lines(Prop_Basal_1[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l',lty=2, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Int_1[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l',lty=6, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Pred_1[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($TL_1[1,] ~ Diff_Ea, pch=16,ylim=c(2.4,3),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, 0.7, 0))
axis(2,at=c(2.5,2.75,3), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Consumer Ea - Top Ea',1, line=2.7, cex=1.8)
mtext('Trophic Level',2,line=3.8, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($TL_1[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($Prop_RT_1[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, 0.7, 0))
axis(2,at=c(0,0.5,1), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
mtext('Top Ea - Consumer Ea',1, line=3, cex=1.8)
mtext('Interaction Strengths',2,line=3.3, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($Prop_RT_1[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l',lty=2, lwd=3,  col=color[i+1])
    lines($Prop_CT_1[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l',lty=6, lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

# 2) For intermediate death rates smaller than top
plot(Prop_Basal_2[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .7, 0))
axis(2,at=seq(0,2,0.25), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
##mtext('Top Ea - Consumer Ea',1, line=2.7, cex=1.8)
#mtext('Proportion Basal',2,line=3.5, cex=1.8)
    # Plot proportion basal
for(i in 1:12){
    lines(Prop_Basal_2[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l',lty=2, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Int_2[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l',lty=6, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Pred_2[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($TL_2[1,] ~ Diff_Ea, pch=16,ylim=c(2.4,3),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, 0.7, 0))
axis(2,at=c(2.5,2.75,3), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Consumer Ea - Top Ea',1, line=2.7, cex=1.8)
#mtext('Trophic Level',2,line=3.3, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($TL_2[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($Prop_RT_2[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, 0.7, 0))
axis(2,at=c(0,0.5,1), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
mtext('Top Ea - Consumer Ea',1, line=3, cex=1.8)
#mtext('Interaction Strengths',2,line=3.3, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($Prop_RT_2[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l',lty=2, lwd=3,  col=color[i+1])
    lines($Prop_CT_2[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l',lty=6, lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

# 3) For intermediate death rates smaller than top
plot(Prop_Basal_3[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, .7, 0))
axis(2,at=seq(0,2,0.25), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Top Ea - Consumer Ea',1, line=2.7, cex=1.8)
#mtext('Proportion Basal',2,line=3.3, cex=1.8)
    # Plot proportion basal
for(i in 1:12){
    lines(Prop_Basal_3[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l',lty=2, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Int_3[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l',lty=6, lwd=3,  col=color[i+1])
    }
for(i in 1:12){
    lines(Prop_Pred_3[i,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($TL_3[1,] ~ Diff_Ea, pch=16,ylim=c(2.4,3),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, 0.7, 0))
axis(2,at=c(2.5,2.75,3), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
#mtext('Top Ea - Consumer Ea',1, line=3.3, cex=1.8)
#mtext('Trophic Level',2,line=3.3, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($TL_3[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l', lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

plot($Prop_RT_3[1,] ~ Diff_Ea, pch=16,ylim=c(0,1),type='l', lwd=3,  col='white', las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3, bty='l')
axis(1,at=c(-0.3,-0.15,0,0.15,0.3), tck=0.015, cex.axis=1.6, lwd.ticks=3, mgp=c(3, 0.7, 0))
axis(2,at=c(0,0.5,1), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3, mgp=c(3, .5, 0))
mtext('Top Ea - Consumer Ea',1, line=3, cex=1.8)
#mtext('Interaction Strengths',2,line=3.3, cex=1.8)
    # Plot Maxima
for(i in 1:12){
    lines($Prop_RT_3[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l',lty=2,lwd=3,  col=color[i+1])
    lines($Prop_CT_3[i,] ~ Diff_Ea, pch=16,ylim=c(0,1.5),type='l',lty=6,lwd=3,  col=color[i+1])
    }
abline(v=0, lty=2)

dev.off()
"


### APPENDIX: temperature fluctuations
###----------------------------------------------------------------------------------------------------------------------------------
# 4) Death rates AND attack rates are temperature-dependent (TEMPERATURE FLUCTUATIONS)

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC]

###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(20,stop=28,length= Temp_n ));
Ea_Pred = collect(range(0,stop=0.6,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);

# Time stops for integration to stop to add fluctuations
time_stops=collect(range(0,stop=10000,length= 1001)); #10, 20, 30, 40, 50...
# Functions that defines sinusoidal temperature fluctuations/need to be defined @everywhere  for parallel computing
@everywhere function effect!_1(integrator)
    integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period) (USED amplitue = 1 and amplitude = 2, and period= 10 and 20)
end
@everywhere function effect!_2(integrator)
    integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period)
end
@everywhere function effect!_3(integrator)
    integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period)
end
# Call back for the integration to stop at preestablished time stops
cb_1 = PresetTimeCallback(time_stops,effect!_1)
cb_2 = PresetTimeCallback(time_stops,effect!_2)
cb_3 = PresetTimeCallback(time_stops,effect!_3)

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4,0.3,0.3,25,Temp[i],Ea_Pred[j],max(Ea_Pred[j]-0.1,0),max(Ea_Pred[j]-0.1,0)];
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.1,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j]];
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1,callback=cb_1)
            sol_1 = solve(prob_1, adaptive=false,dt=0.075) #Reduced step size for speed
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.3,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j]];
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2,callback=cb_2)
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.5,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j]];
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3,callback=cb_3)
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            #Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            #Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            #Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            #Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            #Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            #Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            # Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))


            ## NEED TO RECALCULATE THESE PROPORTIONS BASED ON NEW TL_S!
            # Calculates proportional contributions
            # For top eating resources
            #Prop_RT_1[i,j] = (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_1[i,j] = (p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            # For top eating resources
            #Prop_RT_2[i,j] = (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_2[i,j] = (p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            # For top eating resources
            #Prop_RT_3[i,j] = (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_3[i,j] = (p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);


## Prep data
R"
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;
int_larger_top_1 <- $Pred_mean_12 - $Int_mean_12 < 0  # Int abundance > Pred abundance;
top_larger_int_1 <- $Pred_mean_12 - $Int_mean_12 > 0  # Pred abundance > Int abundance;
int_larger_res_1 <- $Res_mean_12 - $Int_mean_12 < 0   # Int abundance > Res abundance;

top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;
int_larger_top_2 <- $Pred_mean_22 - $Int_mean_22 < 0  # Int abundance > Pred abundance;
top_larger_int_2 <- $Pred_mean_22 - $Int_mean_22 > 0  # Pred abundance > Int abundance;
int_larger_res_2 <- $Res_mean_22 - $Int_mean_22 < 0   # Int abundance > Res abundance;

top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;
int_larger_top_3 <- $Pred_mean_32 - $Int_mean_32 < 0  # Int abundance > Pred abundance;
top_larger_int_3 <- $Pred_mean_32 - $Int_mean_32 > 0  # Pred abundance > Int abundance;
int_larger_res_3 <- $Res_mean_32 - $Int_mean_32 < 0   # Int abundance > Res abundance;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12; TRes_ratio_Res_1 <- $Res_mean_12
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22; TRes_ratio_Res_2 <- $Res_mean_22
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32; TRes_ratio_Res_3 <- $Res_mean_32
"

# 1)
## ABUNDANCE PLOT
R"

### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeangibert/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision/Fig_Res_1.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0),mai=c(0.2,0.2,0.2,0.2),mfrow=c(4,3))

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## Intermediate
plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## TOP PREDATOR
plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)


# 2)
## TROPHIC LEVEL PLOT

# Int mort more sensitive
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_12 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_12, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_22 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_22, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_32 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_32, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

dev.off()
"

### APPENDIX: handling times are also temperature dependent I (*INCREASE* in handling times with T)
###----------------------------------------------------------------------------------------------------------------------------------
# 4) Death rates AND attack rates are temperature-dependent
# PLUS, handling times also are T-dependent. The T-dependence can be of two cases, increases with T or decreases, following Englund paper.

# We will define the following for h increasing with temperature
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))
# and the following for h decreasing with temperature (so, the above function reflected about T=T_ref, for simplicity)
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))

#C eating R will be constant at 0.3

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]

###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(20,stop=28,length= Temp_n ));
Ea_Pred = collect(range(0,stop=0.6,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);

# # Time stops for integration to stop to add fluctuations
# time_stops=collect(range(0,stop=10000,length= 1001)); #10, 20, 30, 40, 50...
# # Functions that defines sinusoidal temperature fluctuations/need to be defined @everywhere  for parallel computing
# @everywhere function effect!_1(integrator)
#     integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period) (USED amplitue = 1 and amplitude = 2, and period= 10 and 20)
# end
# @everywhere function effect!_2(integrator)
#     integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period)
# end
# @everywhere function effect!_3(integrator)
#     integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period)
# end
# # Call back for the integration to stop at preestablished time stops
# cb_1 = PresetTimeCallback(time_stops,effect!_1)
# cb_2 = PresetTimeCallback(time_stops,effect!_2)
# cb_3 = PresetTimeCallback(time_stops,effect!_3)

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4,0.3,0.3,25,Temp[i],Ea_Pred[j],max(Ea_Pred[j]-0.1,0),max(Ea_Pred[j]-0.1,0)];
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.1,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j],0.3,Ea_Pred[j]];
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1) #,callback=cb_1
            sol_1 = solve(prob_1, adaptive=false,dt=0.075) #Reduced step size for speed
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.3,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j],0.3,Ea_Pred[j]];
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2) #,callback=cb_2
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.5,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j],0.3,Ea_Pred[j]];
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3) #,callback=cb_3
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            #Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            #Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            #Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            #Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            #Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            #Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            #Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]))


            ## NEED TO RECALCULATE THESE PROPORTIONS BASED ON NEW TL_S!
            # Calculates proportional contributions
            # For top eating resources
            #Prop_RT_1[i,j] = (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_1[i,j] = (p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            # For top eating resources
            #Prop_RT_2[i,j] = (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_2[i,j] = (p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            # For top eating resources
            #Prop_RT_3[i,j] = (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_3[i,j] = (p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);


## Prep data
R"
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;
int_larger_top_1 <- $Pred_mean_12 - $Int_mean_12 < 0  # Int abundance > Pred abundance;
top_larger_int_1 <- $Pred_mean_12 - $Int_mean_12 > 0  # Pred abundance > Int abundance;
int_larger_res_1 <- $Res_mean_12 - $Int_mean_12 < 0   # Int abundance > Res abundance;

top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;
int_larger_top_2 <- $Pred_mean_22 - $Int_mean_22 < 0  # Int abundance > Pred abundance;
top_larger_int_2 <- $Pred_mean_22 - $Int_mean_22 > 0  # Pred abundance > Int abundance;
int_larger_res_2 <- $Res_mean_22 - $Int_mean_22 < 0   # Int abundance > Res abundance;

top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;
int_larger_top_3 <- $Pred_mean_32 - $Int_mean_32 < 0  # Int abundance > Pred abundance;
top_larger_int_3 <- $Pred_mean_32 - $Int_mean_32 > 0  # Pred abundance > Int abundance;
int_larger_res_3 <- $Res_mean_32 - $Int_mean_32 < 0   # Int abundance > Res abundance;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12; TRes_ratio_Res_1 <- $Res_mean_12
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22; TRes_ratio_Res_2 <- $Res_mean_22
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32; TRes_ratio_Res_3 <- $Res_mean_32
"

# 1)
## ABUNDANCE PLOT
R"

### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeangibert/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision/Fig_Res_1.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0),mai=c(0.2,0.2,0.2,0.2),mfrow=c(4,3))

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## Intermediate
plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## TOP PREDATOR
plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)


# 2)
## TROPHIC LEVEL PLOT

# Int mort more sensitive
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_12 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_12, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_22 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_22, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_32 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_32, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

dev.off()
"



### APPENDIX: handling times are also temperature dependent I (*DECREASE* in handling times with T)
###----------------------------------------------------------------------------------------------------------------------------------
# 4) Death rates AND attack rates are temperature-dependent
# PLUS, handling times also are T-dependent. The T-dependence can be of two cases, increases with T or decreases, following Englund paper.

# We will define the following for h increasing with temperature
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))
# and the following for h decreasing with temperature (so, the above function reflected about T=T_ref, for simplicity)
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))

#C eating R will be constant at 0.3

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]

###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(20,stop=28,length= Temp_n ));
Ea_Pred = collect(range(0,stop=0.6,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);

# # Time stops for integration to stop to add fluctuations
# time_stops=collect(range(0,stop=10000,length= 1001)); #10, 20, 30, 40, 50...
# # Functions that defines sinusoidal temperature fluctuations/need to be defined @everywhere  for parallel computing
# @everywhere function effect!_1(integrator)
#     integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period) (USED amplitue = 1 and amplitude = 2, and period= 10 and 20)
# end
# @everywhere function effect!_2(integrator)
#     integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period)
# end
# @everywhere function effect!_3(integrator)
#     integrator.p[17] += 5*sin(integrator.t/10) # as amplitude*sin(t/period)
# end
# # Call back for the integration to stop at preestablished time stops
# cb_1 = PresetTimeCallback(time_stops,effect!_1)
# cb_2 = PresetTimeCallback(time_stops,effect!_2)
# cb_3 = PresetTimeCallback(time_stops,effect!_3)

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4,0.3,0.3,25,Temp[i],Ea_Pred[j],max(Ea_Pred[j]-0.1,0),max(Ea_Pred[j]-0.1,0)];
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.1,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j],0.3,Ea_Pred[j]];
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1) #,callback=cb_1
            sol_1 = solve(prob_1, adaptive=false,dt=0.075) #Reduced step size for speed
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.3,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j],0.3,Ea_Pred[j]];
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2) #,callback=cb_2
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,0.5,20,Temp[i],0.3,Ea_Pred[j],Ea_Pred[j],0.3,Ea_Pred[j]];
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3) #,callback=cb_3
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            #Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            #Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            #Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            #Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            #Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            #Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            #Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))


            ## NEED TO RECALCULATE THESE PROPORTIONS BASED ON NEW TL_S!
            # Calculates proportional contributions
            # For top eating resources
            #Prop_RT_1[i,j] = (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_1[i,j] = (p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            # For top eating resources
            #Prop_RT_2[i,j] = (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_2[i,j] = (p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            # For top eating resources
            #Prop_RT_3[i,j] = (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_3[i,j] = (p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);


## Prep data
R"
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;
int_larger_top_1 <- $Pred_mean_12 - $Int_mean_12 < 0  # Int abundance > Pred abundance;
top_larger_int_1 <- $Pred_mean_12 - $Int_mean_12 > 0  # Pred abundance > Int abundance;
int_larger_res_1 <- $Res_mean_12 - $Int_mean_12 < 0   # Int abundance > Res abundance;

top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;
int_larger_top_2 <- $Pred_mean_22 - $Int_mean_22 < 0  # Int abundance > Pred abundance;
top_larger_int_2 <- $Pred_mean_22 - $Int_mean_22 > 0  # Pred abundance > Int abundance;
int_larger_res_2 <- $Res_mean_22 - $Int_mean_22 < 0   # Int abundance > Res abundance;

top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;
int_larger_top_3 <- $Pred_mean_32 - $Int_mean_32 < 0  # Int abundance > Pred abundance;
top_larger_int_3 <- $Pred_mean_32 - $Int_mean_32 > 0  # Pred abundance > Int abundance;
int_larger_res_3 <- $Res_mean_32 - $Int_mean_32 < 0   # Int abundance > Res abundance;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12; TRes_ratio_Res_1 <- $Res_mean_12
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22; TRes_ratio_Res_2 <- $Res_mean_22
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32; TRes_ratio_Res_3 <- $Res_mean_32
"

# 1)
## ABUNDANCE PLOT
R"

### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeangibert/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision/Fig_Res_1.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0),mai=c(0.2,0.2,0.2,0.2),mfrow=c(4,3))

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## Intermediate
plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## TOP PREDATOR
plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.4, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.4,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)


# 2)
## TROPHIC LEVEL PLOT

# Int mort more sensitive
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_12 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_12, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_22 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_22, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_2,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)
## Mort
plotvar <- $TL_32 ## <<<===
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_32, nclr, style='quantile') ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[int_larger_top_3,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=3)
axis(1,at=seq(0,0.6, by=0.3),labels=c(-0.3,0,0.6), tck=0.015, cex.axis=1.6, lwd.ticks=3,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.6,lwd.ticks=3,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey') ## <<<===
points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

dev.off()
"



## THE END





## THE END
