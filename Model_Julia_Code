    ############################################################
    #######  Temperature rise and maximum trophic level  #######
    #######             Jean P. Gibert,  2018            #######
    ############################################################

# Loading JULIA packages
#@everywhere using Pkg
@everywhere using Distributed
@everywhere using SharedArrays
@everywhere using DifferentialEquations
@everywhere using RCall
@everywhere using StatsBase

#@everywhere using HDF5
#@everywhere using JLD
@everywhere using DataFrames


# Loading R packages
R"
library('RColorBrewer')
library('classInt')
"



#######################################################################################################################################
## Baseline models and general understanding


## Baseline model (NO Temperature)
@everywhere function LV_model_no_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*u[1]*(1-u[1]/p[2]) - p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1])
    # C
    du[2] = p[6]*p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[9]*u[2] - p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2])
    # T
    du[3] = p[7]*p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]) + p[8]*p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2]) - p[10]*u[3]
end

# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2]

p = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4];

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1;1;1;1];   # [R,C1,C2,a_RC1,a_RC2,a_C1C2]
tspan = (0.0,10000);
    # Same here
#prob_evol = ODEProblem(pf_evol,u0,tspan);
prob_evol = ODEProblem(LV_model_no_T,u0,tspan,p);
sol_evol = solve(prob_evol,adaptive=false,dt=0.075);
# Prepare to plot
sol_evol=sol_evol(0:1:10000);
sol_evol=hcat(sol_evol...)';
times=collect(range(0,stop=10000,length=10001));
burnin=4000;

R"
dev.new()
# Fig 1 A

plot($times,$sol_evol[,1],ylab='s',lwd=2, col='green', type='l', ylim=c(0,5))
lines($times,$sol_evol[,2],ylab='s',lwd=2, col='yellow')
lines($times,$sol_evol[,3],ylab='s',lwd=2, col='blue')

"


## Model with TEMPERATURE
## The baseline model assumes that only death rates can change with temperature.

## Baseline model
@everywhere function LV_model_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*u[1]*(1-u[1]/p[2]) - p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1])
    # C
    du[2] = p[6]*p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2]) -
                    p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]) + p[8]*p[5]*u[2]*u[3]/(1+p[5]*p[13]*u[2]) -
                    p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end

# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp]

#p = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.2,0.4,0.2,0.65,0.65,25,28];

# Define times for integration to stop at to add variable temperatures


time_stops=collect(range(0,stop=10000,length= 1001)); #10, 20, 30, 40, 50...

#time_stops=[500;5000;5767;6789];

function effect!(integrator)
    integrator.p[17] += 1*sin(integrator.t/17) # where 0.05 is the amplitude and 10 is the period.
end

cb = PresetTimeCallback(time_stops,effect!)

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C1,C2,a_RC1,a_RC2,a_C1C2]
tspan = (0.0,10000);
    # Same here
#prob_evol = ODEProblem(pf_evol,u0,tspan);
p = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.65,0.65,20,20];


prob_evol = ODEProblem(LV_model_T,u0,tspan,p,#callback=cb#
);
sol_evol = solve(prob_evol,adaptive=false,dt=0.075);
# Prepare to plot
sol_evol=sol_evol(0:1:10000);
sol_evol=hcat(sol_evol...)';
times=collect(range(0,stop=10000,length=10001));

R"
dev.new()
# Fig 1 A

plot($times,$sol_evol[,1],ylab='s',lwd=2, col='green', type='l', ylim=c(0,5))
lines($times,$sol_evol[,2],ylab='s',lwd=2, col='yellow')
lines($times,$sol_evol[,3],ylab='s',lwd=2, col='blue')

"



# We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0,Ea_Pred[j],20,Temp[i],0,Ea_Pred[j],Ea_Pred[j]]; # Eam_C=0;Eac_P=Ea_pred;EaCattR=0;EaPattR=Ea_pred;EaPattR=Ea_pred // Pred ecto-Grazer endo
prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1)
sol_1 = solve(prob_1, adaptive=false,dt=0.075)
p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,Ea_Pred[j],0,20,Temp[i],Ea_Pred[j],0,0]; # Eam_C=Ea_pred;Eac_P=0;EaCattR=Ea_pred;EaPattR=0;EaPattR=0 // Pred endo-Grazer ecto
prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2)
sol_2 = solve(prob_2, adaptive=false,dt=0.075)
p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,Ea_Pred[j],20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j]]; # //Both ecto Pred Grazer ecto with variable Pred
#p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,Ea_Pred[j],0.5,20,Temp[i],Ea_Pred[j],0.5,0.5]; # Reverse (grazer variable)
prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3)
sol_3 = solve(prob_3, adaptive=false,dt=0.075)
kbol=8.62*10.0^-5
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[18]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[4]*exp((p[19]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1] + p[5]*exp((p[20]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[5]*exp((p[20]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[9]*exp((p[14]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) +
            p[8]*p[5]*exp((p[20]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[10]*exp((p[15]/kbol)*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end

# Eam_C=0;Eac_P=Ea_pred;EaCattR=0;EaPattR=Ea_pred;EaPattR=Ea_pred // Pred ecto-Grazer endo
p= [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.0,0.0,0.0,0.5,0,20,20,0.5,0,0];

p=[1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0,20,25,0.5,0,0]

#p = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0,0.5,20,30,0,0.5,0.5]
u0 = [2.0;1;1];
##### VERY IMPORTANT!!
#mortality=0.8, 0.8, not 0.2, 0.2 OTHERWISE NO COEXISTENCE

#Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp]
#p = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0,0.75,20,17,0,0.75,0.75]
tspan = (0.0,1000);
prob_evol = ODEProblem(LV_model_T_death_attack,u0,tspan,p);
sol_evol = solve(prob_evol,adaptive=false,dt=0.075);
# Prepare to plot
sol_evol=sol_evol(0:1:1000);
sol_evol=hcat(sol_evol...)';
times=collect(range(0,stop=1000,length=1001));
burnin=1000;

R"
dev.new()
# Fig 1 A

plot($times,$sol_evol[,1],ylab='s',lwd=2, col='blue', type='l', ylim=c(0,3))
lines($times,$sol_evol[,2],ylab='s',lwd=2, col='red')
lines($times,$sol_evol[,3],ylab='s',lwd=2, col='yellow')
"




#######################################################################################################################################
## ACTUAL RUNS BELOW


##------------------------------------------------------------------------------------------------------------------------------------
## 1) Only death rates are Temperature-dependent

## Baseline model
## The baseline model assumes that only death rates can change with temperature.

@everywhere function LV_model_death_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/p[2]) - p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*u[1]*u[2]/(1+p[3]*p[11]*u[1]) - p[5]*u[2]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2]) -
                    p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*u[1]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2]) + p[8]*p[5]*u[2]*u[3]/(1+p[4]*p[12]*u[1]+p[5]*p[13]*u[2]) -
                    p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp]



#### Top predators are more suceptible to increases in Tº in all cases, regardless of who has the larger Tº sensitivity.
### We may have a scenario where max TL increases with T, until the top predator goes extinct, in which case it will drop back to the
## TL of the intermediate consumer.

# POSIBLE TITLE: "The transient dynamics of trophic levels under warming."

###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(20,stop=28,length= Temp_n ));
Ea_Pred = collect(range(0,stop=0.6,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);
TL = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT = SharedArray{Float64}(Temp_n,Ea_n);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5 # K was assumed ot be 5, 7 and 9?
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp]

        #p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,Ea_Pred[j],25,Temp[i]];
        p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.2,0.4,0.2,0.3,Ea_Pred[j],20,Temp[i]];
        prob_1 = ODEProblem(LV_model_death_T,u0,tspan,p_1)
        sol_1 = solve(prob_1, adaptive=false,dt=0.075)

        # We ask whether every species is alive in the last time step of "sol"
        sol_plot_1 = hcat(sol_1.u...)'

        # Store mins and max
        Pred_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);
        Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);
        Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);
        Int_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);
        Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);
        Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);
        Res_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);
        Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);
        Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);

        ## NO NEED to calculate this inside the loop as it can be calculated using element-wise operations outside the loop
        # Calculate TL for top predator following Gibert & Yeakel 2019
        #TL[i,j] = 1 + (p[7]*p[4]*Res_max_1[i,j]*Int_max_1[i,j]/(1+p[4]*p[12]*Res_max_1[i,j]))/(p[7]*p[4]*Res_max_1[i,j]*Int_max_1[i,j]/#(1+p[4]*p[12]*Res_max_1[i,j]) + p[8]*p[5]*Int_max_1[i,j]*Pred_max_1[i,j]/(1+p[5]*p[13]*Int_max_1[i,j])) + #2*(p[8]*p[5]*Int_max_1[i,j]*Pred_max_1[i,j]/(1+p[5]*p[13]*Int_max_1[i,j]))/(p[7]*p[4]*Res_max_1[i,j]*Int_max_1[i,j]/#(1+p[4]*p[12]*Res_max_1[i,j]) + p[8]*p[5]*Int_max_1[i,j]*Pred_max_1[i,j]/(1+p[5]*p[13]*Int_max_1[i,j]))

    end
        println(i)
end

p = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.2,0.3,0.12,0.3,0.65,30,28];

# Calculates TL a posteriori following Gibert & Yeakel 2019
#TL = 1 .+ (p[7].*p[4].*Res_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1))./(p[7].*p[4].*Res_max_1.*Pred_max_1./(1 .+p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1) .+ p[8].*p[5].*Int_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1)) .+
# 2*(p[8].*p[5].*Int_max_1.*Pred_max_1./(1 .+p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1))./(p[7].*p[4].*Res_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1) + p[8].*p[5].*Int_max_1.*Pred_max_1./(1 .+ p[4].*p[12].*Res_max_1 .+ p[5].*p[13].*Int_max_1))

# Calculates TL a posteriori following Gibert & Yeakel 2019
TL_mean = 1 .+ (p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) .+ p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean)) .+
 2*(p[8].*p[5].*Int_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) + p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))

# Calculates proportional contributions
# For top eating resources
Prop_RT = (p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) .+ p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))
# For top eating intermediate consumers
Prop_CT = (p[8].*p[5].*Int_mean.*Pred_mean./(1 .+p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))./(p[7].*p[4].*Res_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean) + p[8].*p[5].*Int_mean.*Pred_mean./(1 .+ p[4].*p[12].*Res_mean .+ p[5].*p[13].*Int_mean))

# Calculates the proportion of basal species


## Pass data to R
R"
Diff <- $Int_max_1 - $Pred_max_1
Diff_min <- $Int_min_1 - $Pred_min_1
Diff_mean <- $Int_mean - $Pred_mean
Prop_Basal <- $Res_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Int <- $Int_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Pred <- $Pred_mean /($Res_mean + $Int_mean + $Pred_mean)
Diff_Ea <- $Ea_Pred - 0.3

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(13)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean2 = hcat(Pred_mean'...)
Int_mean2 = hcat(Int_mean'...)
Res_mean2 = hcat(Res_mean'...)
TL_mean2 = hcat(TL_mean'...)


## Prep data
R"
top_extinct <- $Pred_mean2 < 0.01   # Predator goes extinct
int_extinct <- $Int_mean2 < 0.01    # Intermediate goes extinct
int_larger_top <- $Pred_mean2 - $Int_mean2 < 0  # Int abundance > Pred abundance
top_larger_int <- $Pred_mean2 - $Int_mean2 > 0  # Pred abundance > Int abundance
int_larger_res <- $Res_mean2 - $Int_mean2 < 0   # Int abundance > Res abundance

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio <- $Pred_mean2
"
# 1)
## ABUNDANCE PLOT
R"
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio, nclr, style='quantile')
colcode <- findColours(class, plotclr)

png(filename='/Users/jeangibert/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision/New_Fig3/Fig_Pred.png',
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0))
plot($combin[int_larger_top,], pch=15,cex=1.1, col=colcode,
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=4)
axis(1,at=seq(0,0.6, by=0.1), tck=0.015, cex.axis=1.3, lwd.ticks=4,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.3,lwd.ticks=4,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int,], pch=15,cex=1.1, col=blues[2])
points($combin[top_extinct,], pch=15,cex=1.1, col='grey')
points($combin[int_extinct,], pch=15,cex=1.1, col='black')
#points($combin[int_larger_res,], pch=15,cex=1.1, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

dev.off()
"


# 2)
## TROPHIC LEVEL PLOT
R"
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- $TL_mean2
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_mean2, nclr, style='quantile')
colcode <- findColours(class, plotclr)

#png(filename='/Users/jeangibert/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision/New_Fig3/Ab_TL.png',
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0))

plot($combin[int_larger_top,], pch=15,cex=1.1, col=colcode,
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=4)
axis(1,at=seq(0,0.6, by=0.1), tck=0.015, cex.axis=1.3, lwd.ticks=4,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.3,lwd.ticks=4,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int,], pch=15,cex=1.1, col=blues[2])
points($combin[top_extinct,], pch=15,cex=1.1, col='grey')
points($combin[int_extinct,], pch=15,cex=1.1, col='black')
#points($combin[int_larger_res,], pch=15,cex=1.1, col=blues[6])
#abline(0,1, lwd=2)

#dev.off()
"


##------------------------------------------------------------------------------------------------------------------------------------
## 2) Only attack rates are Temperature-dependent

## This model assumes that only the attack rates can change with temperature.

@everywhere function LV_model_attack_T(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.3/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[2]/(1+p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[11]*u[1]) -
            p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[2]/(1+p[3]*exp((p[14]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[11]*u[1]) -
            p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[2]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2]) -
            p[9]*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[1]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2]) +
            p[8]*p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*u[2]*u[3]/(1+p[4]*exp((p[15]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[12]*u[1]+p[5]*exp((p[16]/(8.62*10.0^-5))*(1/(p[17]+273)-1/(p[18]+273)))*p[13]*u[2]) -
            p[10]*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaCattR, 15 = EaTattR, 16 = EaTattC,17= Tref, 18=Temp]

###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(20,stop=28,length= Temp_n ));
Ea_Pred = collect(range(0,stop=0.6,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);
TL = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT = SharedArray{Float64}(Temp_n,Ea_n);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5 # K was assumed ot be 5, 7 and 9?
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaCattR, 15 = EaTattR, 16 = EaTattC,17= Tref, 18=Temp]

        #p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.3,Ea_Pred[j],Ea_Pred[j],25,Temp[i]];
        p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.2,0.4,0.2,0.3,Ea_Pred[j],Ea_Pred[j],20,Temp[i]];

        prob_1 = ODEProblem(LV_model_attack_T,u0,tspan,p_1)
        sol_1 = solve(prob_1, adaptive=false,dt=0.075)

        # We ask whether every species is alive in the last time step of "sol"
        sol_plot_1 = hcat(sol_1.u...)'

        # Store mins and max
        Pred_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);
        Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);
        Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);
        Int_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);
        Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);
        Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);
        Res_mean[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);
        Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);
        Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);

        # Calculate TL for top predator following Gibert & Yeakel 2019
        TL[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j])) +
        2*(p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))

        # Calculate proportional contributions
        Prop_RT[i,j] = (p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))

        Prop_CT[i,j] = (p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))/(p_1[7]*p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Res_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]) + p_1[8]*p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*Int_mean[i,j]*Pred_mean[i,j]/(1+p_1[4]*exp((p_1[15]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[12]*Res_mean[i,j]+p_1[5]*exp((p_1[16]/(8.62*10.0^-5))*(1/(p_1[17]+273)-1/(p_1[18]+273)))*p_1[13]*Int_mean[i,j]))

    end
        println(i)
end

## Pass data to R
R"
Diff <- $Int_max_1 - $Pred_max_1
Diff_min <- $Int_min_1 - $Pred_min_1
Diff_mean <- $Int_mean - $Pred_mean
Prop_Basal <- $Res_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Int <- $Int_mean /($Res_mean + $Int_mean + $Pred_mean)
Prop_Pred <- $Pred_mean /($Res_mean + $Int_mean + $Pred_mean)
Diff_Ea <- $Ea_Pred - 0.3

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(13)
"

#### PLOT RESULTS


#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean2 = hcat(Pred_mean'...)
Int_mean2 = hcat(Int_mean'...)
Res_mean2 = hcat(Res_mean'...)
TL2 = hcat(TL'...)


## Prep data
R"
top_extinct <- $Pred_mean2 < 0.01   # Predator goes extinct
int_extinct <- $Int_mean2 < 0.01    # Intermediate goes extinct
int_larger_top <- $Pred_mean2 - $Int_mean2 < 0  # Int abundance > Pred abundance
top_larger_int <- $Pred_mean2 - $Int_mean2 > 0  # Pred abundance > Int abundance
int_larger_res <- $Res_mean2 - $Int_mean2 < 0   # Int abundance > Res abundance

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio <- $Res_mean2
"
# 1)
## ABUNDANCE PLOT
R"
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio
nclr <- 8
plotclr <- brewer.pal(nclr,'YlGnBu')
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio, nclr, style='quantile')
colcode <- findColours(class, plotclr)

png(filename='/Users/jeangibert/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision/Att_Fig_Res.png',
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0))
plot($combin[int_larger_top,], pch=15,cex=1.1, col=colcode,
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=4)
axis(1,at=seq(0,0.6, by=0.1), tck=0.015, cex.axis=1.3, lwd.ticks=4,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.3,lwd.ticks=4,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int,], pch=15,cex=1.1, col=blues[2])
points($combin[top_extinct,], pch=15,cex=1.1, col='grey')
points($combin[int_extinct,], pch=15,cex=1.1, col='black')
#points($combin[int_larger_res,], pch=15,cex=1.1, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

dev.off()
"


# 2)
## TROPHIC LEVEL PLOT
R"
blues <- colorRampPalette(brewer.pal(8,'Blues'))(n=299)
#Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- $TL2
nclr <- 8
plotclr <- blues
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL2, nclr, style='quantile')
colcode <- findColours(class, plotclr)

png(filename='/Users/jeangibert/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision/New_Fig3/Att_Ab_TL.png',
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0))

plot($combin[int_larger_top,], pch=15,cex=1.1, col=colcode,
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=4)
axis(1,at=seq(0,0.6, by=0.1), tck=0.015, cex.axis=1.3, lwd.ticks=4,mgp=c(3, .5, 0))
axis(2,at=seq(20,30, by=2), tck=0.015, las=TRUE, cex.axis=1.3,lwd.ticks=4,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

points($combin[top_larger_int,], pch=15,cex=1.1, col=blues[2])
points($combin[top_extinct,], pch=15,cex=1.1, col='grey')
points($combin[int_extinct,], pch=15,cex=1.1, col='black')
#points($combin[int_larger_res,], pch=15,cex=1.1, col=blues[6])
#abline(0,1, lwd=2)

dev.off()
"


###----------------------------------------------------------------------------------------------------------------------------------
# INTER-THERMY ASYMMETRIES / INTRA-THERMY (see parameter changes in L669 to 678 for one or the other scenario)
#3) Death rates AND attack rates are temperature-dependent (GROWTH RATES TEMP INDEP)

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1] + p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC]


###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(15,stop=30,length= Temp_n ));
Ea_Pred = collect(range(0,stop=1,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0,Ea_Pred[j],20,Temp[i],0,Ea_Pred[j],Ea_Pred[j]]; # Eam_C=0;Eac_P=Ea_pred;EaCattR=0;EaPattR=Ea_pred;EaPattR=Ea_pred // Pred ecto-Grazer endo
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1)
            sol_1 = solve(prob_1, adaptive=false,dt=0.075)
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,Ea_Pred[j],0,20,Temp[i],Ea_Pred[j],0,0]; # Eam_C=Ea_pred;Eac_P=0;EaCattR=Ea_pred;EaPattR=0;EaPattR=0 // Pred endo-Grazer ecto
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2)
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,Ea_Pred[j],20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j]]; # //Both ecto Pred Grazer ecto with variable Pred
            #p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,Ea_Pred[j],0.5,20,Temp[i],Ea_Pred[j],0.5,0.5]; # Reverse (grazer variable)
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3)
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            # Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

            ## NEED TO RECALCULATE THESE PROPORTIONS BASED ON NEW TL_S!
            # Calculates proportional contributions
            # For top eating resources
            #Prop_RT_1[i,j] = (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/#(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_1[i,j] = (p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/#(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            # For top eating resources
            #Prop_RT_2[i,j] = (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/#(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_2[i,j] = (p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/#(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            # For top eating resources
            #Prop_RT_3[i,j] = (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/#(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_3[i,j] = (p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/#(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);

# For grazer varying version all arrays need to be reversed so x axis represents the same information as in scenario where predator varies (use reverse(Ea_Pred,dims=1) instead of)
#combin_New = reshape([[x,y] for x in reverse(Ea_Pred,dims=1), y in Temp],Temp_n*Ea_n,1)
combin_New = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1)
combin = hcat(combin_New...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);


## Prep data
R"
res_extant_1 <- $Res_mean_12 > 0.01
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;

res_extant_2 <- $Res_mean_22 > 0.01
top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;

res_extant_3 <- $Res_mean_32 > 0.01
top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12;
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22;
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32;

# Here, we cap the range of values for the Resource at 3.9 because in this range of parameters, that can only be achieved for parameter space
    # for which the predator goes extinct. If we don't specify this, the range of colors shown in the figure is more limited. For a different combination of parameters,
        # It may be necessary to change the maximum allowed to something else. This is just to ensure the color range is adequate, it does not alter the actual results of the model
# For Res
TRes_ratio_Res_1 <- rep(0,length($Res_mean_12));TRes_ratio_Res_2 <- rep(0,length($Res_mean_22));TRes_ratio_Res_3 <- rep(0,length($Res_mean_32))
for(i in 1:length($Res_mean_12)){if($Res_mean_12[i]>3.9){TRes_ratio_Res_1[i] <- NA}else{TRes_ratio_Res_1[i] <- $Res_mean_12[i]}}
for(i in 1:length($Res_mean_22)){if($Res_mean_22[i]>3.9){TRes_ratio_Res_2[i] <- NA}else{TRes_ratio_Res_2[i] <- $Res_mean_22[i]}}
for(i in 1:length($Res_mean_32)){if($Res_mean_32[i]>3.9){TRes_ratio_Res_3[i] <- NA}else{TRes_ratio_Res_3[i] <- $Res_mean_32[i]}}
# For Int
TRes_ratio_Int_1 <- rep(0,length($Int_mean_12));TRes_ratio_Int_2 <- rep(0,length($Int_mean_22));TRes_ratio_Int_3 <- rep(0,length($Int_mean_32))
for(i in 1:length($Int_mean_12)){if($Int_mean_12[i]<0.5){TRes_ratio_Int_1[i] <- NA}else{TRes_ratio_Int_1[i] <- $Int_mean_12[i]}}
for(i in 1:length($Int_mean_22)){if($Int_mean_22[i]<0.5){TRes_ratio_Int_2[i] <- NA}else{TRes_ratio_Int_2[i] <- $Int_mean_22[i]}}
for(i in 1:length($Int_mean_32)){if($Int_mean_32[i]<0.5){TRes_ratio_Int_3[i] <- NA}else{TRes_ratio_Int_3[i] <- $Int_mean_32[i]}}

# We do the same for TL
TL_12 <- rep(0,length($TL_12));TL_22 <- rep(0,length($TL_12));TL_32 <- rep(0,length($TL_12))
for(i in 1:length($TL_12)){if($TL_12[i]<2.39){TL_12[i] <- NA}else{TL_12[i] <- $TL_12[i]}}
for(i in 1:length($TL_22)){if($TL_22[i]<2.39){TL_22[i] <- NA}else{TL_22[i] <- $TL_22[i]}}
for(i in 1:length($TL_32)){if($TL_32[i]<2.39){TL_32[i] <- NA}else{TL_32[i] <- $TL_32[i]}}
"

# 1)
## ABUNDANCE PLOT
R"

### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(100)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

#plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Res_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeanphi/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision_3/Appendix_2/Fig_S8.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,1),mai=c(0.1,0.1,0.1,0.2),mfrow=c(4,3), xpd=TRUE)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Res_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Res_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<==
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)

## INTERMEDIATE

nclr <- 15
min <- min(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3), na.rm=TRUE)
max <- max(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3), na.rm=TRUE)
breaks <- (max - min)/nclr
#plotvar <- TRes_ratio_Int_1 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Int_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Int_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)

## TOP PREDATOR
nclr <- 15
min <- min(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3))
max <- max(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3))
breaks <- (max - min)/nclr
#plotvar <- TRes_ratio_Pred_1 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Pred_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Pred_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)


# 2)
## TROPHIC LEVEL PLOT

nclr <- 15
min <- min(c(TL_12,TL_22,TL_32),na.rm=TRUE)
max <- max(c(TL_12,TL_22,TL_32),na.rm=TRUE)
breaks <- (max - min)/nclr
# Int mort more sensitive
## Mort
plotvar <- TL_12 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_12, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort

## Mort
plotvar <- TL_22 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_22, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
## Mort
plotvar <- TL_32 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_32, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)

dev.off()
"


###----------------------------------------------------------------------------------------------------------------------------------
# INTER-RATE ASYMMETRIES
#4) Death rates AND attack rates are temperature-dependent (GROWTH RATES TEMP INDEP)

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*u[1]*(1-u[1]/p[2]) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC]


###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(15,stop=30,length= Temp_n ));
Ea_Pred = collect(range(0,stop=1,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.5). Top predator varies from 0 to 1
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.2,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j]]; # For variable predator
            #p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.2,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5]; # For variable grazer
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1)
            sol_1 = solve(prob_1, adaptive=false,dt=0.075)
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.5,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j]]; # For variable predator
            #p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5]; # For variable grazer
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2)
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.8,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j]]; # For variable predator
            #p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.8,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5]; # For variable grazer
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3)
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            # Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))


    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);

# For grazer varying version all arrays need to be reversed so x axis represents the same information as in scenario where predator varies
#combin_New = reshape([[x,y] for x in reverse(Ea_Pred,dims=1), y in Temp],Temp_n*Ea_n,1)
#combin = hcat(combin_New...)'
#Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
#Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
#Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
#TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);
#TL_12 = ifelse.(isnan.(TL_12), 3.0, TL_12) # Run only for grazers more sensitive

## Prep data
R"
res_extant_1 <- $Res_mean_12 > 0.01
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;

res_extant_2 <- $Res_mean_22 > 0.01
top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;

res_extant_3 <- $Res_mean_32 > 0.01
top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12;
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22;
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32;
"

R"
# Here, we eliminate values for the Resource below 2.15 because in thar range of parameters, that can only be achieved for parameter space
    # for which the predator goes extinct. If we don't specify this, the range of colors shown in the figure is more limited but the results are the same.
        #For a different combination of parameters, It may be necessary to change the maximum allowed to something else.
# For Res
TRes_ratio_Res_1 <- rep(0,length($Res_mean_12));TRes_ratio_Res_2 <- rep(0,length($Res_mean_22));TRes_ratio_Res_3 <- rep(0,length($Res_mean_32))
for(i in 1:length($Res_mean_12)){if($Res_mean_12[i]<2.15){TRes_ratio_Res_1[i] <- NA}else{TRes_ratio_Res_1[i] <- $Res_mean_12[i]}}
for(i in 1:length($Res_mean_22)){if($Res_mean_22[i]<2.15){TRes_ratio_Res_2[i] <- NA}else{TRes_ratio_Res_2[i] <- $Res_mean_22[i]}}
for(i in 1:length($Res_mean_32)){if($Res_mean_32[i]<2.15){TRes_ratio_Res_3[i] <- NA}else{TRes_ratio_Res_3[i] <- $Res_mean_32[i]}}

"

# 1)
## ABUNDANCE PLOT
R"

### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Res_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeanphi/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision_3/New_Fig_4/NEW_Fig_4.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,1),mai=c(0.1,0.1,0.1,0.2),mfrow=c(4,3), xpd=TRUE)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Res_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)


#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)


## INTERMEDIATE CONSUMER
plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Int_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)


#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)


## TOP PREDATOR
plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)


#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)


# 2)
## TROPHIC LEVEL PLOT

nclr <- 15
min <- min(c($TL_12,$TL_22,$TL_32),na.rm=TRUE)
max <- max(c($TL_12,$TL_22,$TL_32),na.rm=TRUE)
breaks <- (max - min)/nclr
# Int mort more sensitive

# Int mort more sensitive
## Mort
plotvar <- $TL_12 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_12, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort

## Mort
plotvar <- $TL_22 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_22, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
## Mort
plotvar <- $TL_32 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals($TL_32, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

#legend('bottomright', inset = c(- 0.2, 0),
#  legend = names(attr(colcode, 'table')),
#  fill = attr(colcode, 'palette'),
#  cex = 0.56,
#  border= FALSE,
#  bty = 'n',
#  xpd=TRUE)

dev.off()
"


###----------------------------------------------------------------------------------------------------------------------------------
# APPENDIX: FULL MODEL, ALL RATES Temp dep. INTER-THERMY ASYMMETRIES/Intra-Thermy (REQUIRES RUNNING THE INTER-RATES ASYMMETRIES FIRST FOR PLOTTING, OTHERWISE PLOT IS WRONG)
#3) Death rates AND attack rates are temperature-dependent (GROWTH RATES TEMP INDEP)

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.5/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/(p[2]*exp((-0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273))))) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]


###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(15,stop=30,length= Temp_n ));
Ea_Pred = collect(range(0,stop=1,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4,0.3,0.3,25,Temp[i],Ea_Pred[j],max(Ea_Pred[j]-0.1,0),max(Ea_Pred[j]-0.1,0)];
            #p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.2,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5];
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0,Ea_Pred[j],20,Temp[i],0,Ea_Pred[j],Ea_Pred[j],0,0.5]; # Eam_C=0;Eac_P=Ea_pred;EaCattR=0;EaPattR=Ea_pred;EaPattR=Ea_pred // Pred ecto-Grazer endo
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1)
            sol_1 = solve(prob_1, adaptive=false,dt=0.075)
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,Ea_Pred[j],0,20,Temp[i],Ea_Pred[j],0,0,0.5,0]; # Eam_C=Ea_pred;Eac_P=0;EaCattR=Ea_pred;EaPattR=0;EaPattR=0 // Pred endo-Grazer ecto
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2)
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,Ea_Pred[j],20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5]; # //Both ecto Pred endo-Grazer ecto
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3)
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            # Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

            ## NEED TO RECALCULATE THESE PROPORTIONS BASED ON NEW TL_S!
            # Calculates proportional contributions
            # For top eating resources
            #Prop_RT_1[i,j] = (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/#(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_1[i,j] = (p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/#(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            # For top eating resources
            #Prop_RT_2[i,j] = (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/#(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_2[i,j] = (p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/#(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            # For top eating resources
            #Prop_RT_3[i,j] = (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/#(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_3[i,j] = (p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/#(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);



## Prep data
R"
res_extant_1 <- $Res_mean_12 > 0.01
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;

res_extant_2 <- $Res_mean_22 > 0.01
top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;

res_extant_3 <- $Res_mean_32 > 0.01
top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12; TRes_ratio_Res_1 <- $Res_mean_12
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22; TRes_ratio_Res_2 <- $Res_mean_22
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32; TRes_ratio_Res_3 <- $Res_mean_32
"

R"
# Here, we eliminate values for the Resource below 2.15 because in thar range of parameters, that can only be achieved for parameter space
    # for which the predator goes extinct. If we don't specify this, the range of colors shown in the figure is more limited but the results are the same.
        #For a different combination of parameters, It may be necessary to change the maximum allowed to something else.
# For Res
TRes_ratio_Res_1 <- rep(0,length($Res_mean_12));TRes_ratio_Res_2 <- rep(0,length($Res_mean_22));TRes_ratio_Res_3 <- rep(0,length($Res_mean_32))
for(i in 1:length($Res_mean_12)){if($Res_mean_12[i]>3.8){TRes_ratio_Res_1[i] <- NA}else{TRes_ratio_Res_1[i] <- $Res_mean_12[i]}}
for(i in 1:length($Res_mean_22)){if($Res_mean_22[i]>3.8){TRes_ratio_Res_2[i] <- NA}else{TRes_ratio_Res_2[i] <- $Res_mean_22[i]}}
for(i in 1:length($Res_mean_32)){if($Res_mean_32[i]>3.8){TRes_ratio_Res_3[i] <- NA}else{TRes_ratio_Res_3[i] <- $Res_mean_32[i]}}

# We do the same for TL
TL_12 <- rep(0,length($TL_12));TL_22 <- rep(0,length($TL_12));TL_32 <- rep(0,length($TL_12))
for(i in 1:length($TL_12)){if($TL_12[i]<2.4){TL_12[i] <- NA}else{TL_12[i] <- $TL_12[i]}}
for(i in 1:length($TL_22)){if($TL_22[i]<2.4){TL_22[i] <- NA}else{TL_22[i] <- $TL_22[i]}}
for(i in 1:length($TL_32)){if($TL_32[i]<2.4){TL_32[i] <- NA}else{TL_32[i] <- $TL_32[i]}}

"

# 1)
## ABUNDANCE PLOTS
R"

### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Res_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeanphi/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision_3/Appendix_2/App_FigS6.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0),mai=c(0.1,0.1,0.1,0.2),mfrow=c(4,3))

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<==
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## INTERMEDIATE

plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Int_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## TOP PREDATOR

plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

# 2)
## TROPHIC LEVEL PLOT

nclr <- 15
min <- min(c(TL_12,TL_22,TL_32),na.rm=TRUE)
max <- max(c(TL_12,TL_22,TL_32),na.rm=TRUE)
breaks <- (max - min)/nclr
# Int mort more sensitive
## Mort
plotvar <- TL_12 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_12, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort

## Mort
plotvar <- TL_22 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_22, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
## Mort
plotvar <- TL_32 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_32, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

dev.off()
"



### APPENDIX (INTER-RATE): FULL MODEL, handling times/r and K also also temperature dependent I (*DECREASE* in handling times with T)
###----------------------------------------------------------------------------------------------------------------------------------
# 4) Death rates AND attack rates are temperature-dependent
# PLUS, handling times also are T-dependent. The T-dependence can be of two cases, increases with T or decreases, following Englund paper.

# We will define the following for h increasing with temperature
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))
# and the following for h decreasing with temperature (so, the above function reflected about T=T_ref, for simplicity)
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))

#C eating R will be constant at 0.3

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.5/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/(p[2]*exp((-0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273))))) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2])
    # C
    du[2] = p[6]*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) +
            p[8]*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]

end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]

###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(15,stop=30,length= Temp_n ));
Ea_Pred = collect(range(0,stop=1,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);


#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.2). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.2,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5,0.5,0.5];  # For variable grazer
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.2,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5]; # For variable Predator
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1) #,callback=cb_1
            sol_1 = solve(prob_1, adaptive=false,dt=0.075) #Reduced step size for speed
            #p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5,0.5,0.5];  # For variable grazer
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.5,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5]; # For variable Predator
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2) #,callback=cb_2
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            #p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.8,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5,0.5,0.5];  # For variable grazer
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.8,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5]; # For variable Predator
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3) #,callback=cb_3
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            #Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            #Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            #Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            #Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            #Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            #Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            #Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j])) +
            2*(p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j])) +
            2*(p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j])) +
            2*(p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);

# For grazer varying version all arrays need to be reversed so x axis represents the same information as in scenario where predator varies
#combin_New = reshape([[x,y] for x in reverse(Ea_Pred,dims=1), y in Temp],Temp_n*Ea_n,1)
#combin = hcat(combin_New...)'
#Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
#Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
#Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
#TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);
#TL_12 = ifelse.(isnan.(TL_12), 3.0, TL_12) # Run only for grazers mor sensitive


## Prep data
R"
res_extant_1 <- $Res_mean_12 > 0.01
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;

res_extant_2 <- $Res_mean_22 > 0.01
top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;

res_extant_3 <- $Res_mean_32 > 0.01
top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12; TRes_ratio_Res_1 <- $Res_mean_12
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22; TRes_ratio_Res_2 <- $Res_mean_22
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32; TRes_ratio_Res_3 <- $Res_mean_32


### Only needed for variable grazer for plotting so color code spans range of variation
# Here, we eliminate values for the Resource below 2.15 because in thar range of parameters, that can only be achieved for parameter space
    # for which the predator goes extinct. If we don't specify this, the range of colors shown in the figure is more limited but the results are the same.
        #For a different combination of parameters, It may be necessary to change the maximum allowed to something else.
# For Int
TRes_ratio_Int_1 <- rep(0,length($Int_mean_12));TRes_ratio_Int_2 <- rep(0,length($Int_mean_22));TRes_ratio_Int_3 <- rep(0,length($Int_mean_32))
for(i in 1:length($Int_mean_12)){if($Int_mean_12[i]<0.4){TRes_ratio_Int_1[i] <- NA}else{TRes_ratio_Int_1[i] <- $Int_mean_12[i]}}
for(i in 1:length($Int_mean_22)){if($Int_mean_22[i]<0.4){TRes_ratio_Int_2[i] <- NA}else{TRes_ratio_Int_2[i] <- $Int_mean_22[i]}}
for(i in 1:length($Int_mean_32)){if($Int_mean_32[i]<0.4){TRes_ratio_Int_3[i] <- NA}else{TRes_ratio_Int_3[i] <- $Int_mean_32[i]}}

# We do the same for TL
TL_12 <- rep(0,length($TL_12));TL_22 <- rep(0,length($TL_12));TL_32 <- rep(0,length($TL_12))
for(i in 1:length($TL_12)){if($TL_12[i]<2.5){TL_12[i] <- NA}else{TL_12[i] <- $TL_12[i]}}
for(i in 1:length($TL_22)){if($TL_22[i]<2.5){TL_22[i] <- NA}else{TL_22[i] <- $TL_22[i]}}
for(i in 1:length($TL_32)){if($TL_32[i]<2.5){TL_32[i] <- NA}else{TL_32[i] <- $TL_32[i]}}

"

# 1)
## ABUNDANCE PLOT
R"
### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Res_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

#png(filename='/Users/jeanphi/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision_3/Appendix_3/Fig_S11.png', ## <<<===
#    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0),mai=c(0.1,0.1,0.1,0.2),mfrow=c(4,3))

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## INTERMEDIATE

#plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Int_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Int_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Int_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## TOP PREDATOR

plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

# 2)
## TROPHIC LEVEL PLOT

# Int mort more sensitive
## Mort
nclr <- 15
min <- min(c(TL_12,TL_22,TL_32),na.rm=TRUE)
max <- max(c(TL_12,TL_22,TL_32),na.rm=TRUE)
breaks <- (max - min)/nclr
# Int mort more sensitive
## Mort
plotvar <- TL_12 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_12, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort

## Mort
plotvar <- TL_22 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_22, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
## Mort
plotvar <- TL_32 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_32, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

#dev.off()
"



###############################################################################################################
###############################################################################################################
###############################################################################################################
## WITH Temp DEPENDENCES IN CONVERSION EFFICIENCIES
###############################################################################################################
###############################################################################################################
###############################################################################################################


###----------------------------------------------------------------------------------------------------------------------------------
# APPENDIX: FULL MODEL, ALL RATES Temp dep. INTER-THERMY ASYMMETRIES/Intra-Thermy (REQUIRES RUNNING THE INTER-RATES ASYMMETRIES FIRST FOR PLOTTING, OTHERWISE PLOT IS WRONG)
#3) Death rates AND attack rates are temperature-dependent (GROWTH RATES TEMP INDEP)

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.5/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/(p[2]*exp((-0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273))))) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2])
    # C
    du[2] = p[6]*exp((p[23]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*exp((p[24]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) +
            p[8]*exp((p[25]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]
end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa
#                                  , 23=Ea_e_RC1, 24=Ea_e_RC2, 25=Ea_e_C1C2]


###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=60
Ea_n=70

Temp = collect(range(15,stop=30,length= Temp_n ));
Ea_Pred = collect(range(0,stop=1,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);

#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa
        #                                  , 23=Ea_e_RC1, 24=Ea_e_RC2, 25=Ea_e_C1C2]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.3). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,5,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.4,0.4,0.3,0.3,25,Temp[i],Ea_Pred[j],max(Ea_Pred[j]-0.1,0),max(Ea_Pred[j]-0.1,0)];
            #p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.2,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5];
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0,Ea_Pred[j],20,Temp[i],0,Ea_Pred[j],Ea_Pred[j],0,0.5,0,-0.5,-0.5]; # Eam_C=0;Eac_P=Ea_pred;EaCattR=0;EaPattR=Ea_pred;EaPattR=Ea_pred // Pred ecto-Grazer endo
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1)
            sol_1 = solve(prob_1, adaptive=false,dt=0.075)
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,Ea_Pred[j],0,20,Temp[i],Ea_Pred[j],0,0,0.5,0,-0.5,0,0]; # Eam_C=Ea_pred;Eac_P=0;EaCattR=Ea_pred;EaPattR=0;EaPattR=0 // Pred endo-Grazer ecto
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2)
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,Ea_Pred[j],20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5,-0.5,-0.5,-0.5]; # //Both ecto Pred endo-Grazer ecto
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3)
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            # Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*exp((p_1[25]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j])) +
            2*(p_1[8]*exp((p_1[25]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*exp((p_1[25]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*exp((p_2[24]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*exp((p_2[24]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*exp((p_2[25]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j])) +
            2*(p_2[8]*exp((p_2[25]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*exp((p_2[24]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*exp((p_2[25]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*exp((p_3[24]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*exp((p_3[24]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*exp((p_3[25]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j])) +
            2*(p_3[8]*exp((p_3[25]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*exp((p_3[24]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*exp((p_3[25]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

            ## NEED TO RECALCULATE THESE PROPORTIONS BASED ON NEW TL_S!
            # Calculates proportional contributions
            # For top eating resources
            #Prop_RT_1[i,j] = (p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/#(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_1[i,j] = (p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))/(p_1[7]*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/#(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]) + p_1[8]*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*Int_mean_1[i,j]))

            # For top eating resources
            #Prop_RT_2[i,j] = (p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/#(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_2[i,j] = (p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))/(p_2[7]*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/#(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]) + p_2[8]*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*Int_mean_2[i,j]))

            # For top eating resources
            #Prop_RT_3[i,j] = (p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/#(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))
            # For top eating intermediate consumers
            #Prop_CT_3[i,j] = (p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/#(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]) + p_3[8]*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);



## Prep data
R"
res_extant_1 <- $Res_mean_12 > 0.01
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;

res_extant_2 <- $Res_mean_22 > 0.01
top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;

res_extant_3 <- $Res_mean_32 > 0.01
top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12; TRes_ratio_Res_1 <- $Res_mean_12
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22; TRes_ratio_Res_2 <- $Res_mean_22
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32; TRes_ratio_Res_3 <- $Res_mean_32
"

R"
# Here, we eliminate values for the Resource below 2.15 because in thar range of parameters, that can only be achieved for parameter space
    # for which the predator goes extinct. If we don't specify this, the range of colors shown in the figure is more limited but the results are the same.
        #For a different combination of parameters, It may be necessary to change the maximum allowed to something else.
# For Res
TRes_ratio_Res_1 <- rep(0,length($Res_mean_12));TRes_ratio_Res_2 <- rep(0,length($Res_mean_22));TRes_ratio_Res_3 <- rep(0,length($Res_mean_32))
for(i in 1:length($Res_mean_12)){if($Res_mean_12[i]>3.3){TRes_ratio_Res_1[i] <- NA}else{TRes_ratio_Res_1[i] <- $Res_mean_12[i]}}
for(i in 1:length($Res_mean_22)){if($Res_mean_22[i]>3.3){TRes_ratio_Res_2[i] <- NA}else{TRes_ratio_Res_2[i] <- $Res_mean_22[i]}}
for(i in 1:length($Res_mean_32)){if($Res_mean_32[i]>3.3){TRes_ratio_Res_3[i] <- NA}else{TRes_ratio_Res_3[i] <- $Res_mean_32[i]}}

# We do the same for TL
TL_12 <- rep(0,length($TL_12));TL_22 <- rep(0,length($TL_12));TL_32 <- rep(0,length($TL_12))
for(i in 1:length($TL_12)){if($TL_12[i]<2.4){TL_12[i] <- NA}else{TL_12[i] <- $TL_12[i]}}
for(i in 1:length($TL_22)){if($TL_22[i]<2.4){TL_22[i] <- NA}else{TL_22[i] <- $TL_22[i]}}
for(i in 1:length($TL_32)){if($TL_32[i]<2.4){TL_32[i] <- NA}else{TL_32[i] <- $TL_32[i]}}


"

# 1)
## ABUNDANCE PLOTS
R"

### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Res_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeanphi/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision_3/Appendix_2/App_FigS6.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0),mai=c(0.1,0.1,0.1,0.2),mfrow=c(4,3))

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<==
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## INTERMEDIATE

plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Int_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Int_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## TOP PREDATOR

plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

# 2)
## TROPHIC LEVEL PLOT

nclr <- 15
min <- min(c(TL_12,TL_22,TL_32),na.rm=TRUE)
max <- max(c(TL_12,TL_22,TL_32),na.rm=TRUE)
breaks <- (max - min)/nclr
# Int mort more sensitive
## Mort
plotvar <- TL_12 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_12, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort

## Mort
plotvar <- TL_22 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_22, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
## Mort
plotvar <- TL_32 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_32, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

dev.off()
"



### APPENDIX (INTER-RATE): FULL MODEL, handling times/r and K also also temperature dependent I (*DECREASE* in handling times with T)
###----------------------------------------------------------------------------------------------------------------------------------
# 4) Death rates AND attack rates are temperature-dependent
# PLUS, handling times also are T-dependent. The T-dependence can be of two cases, increases with T or decreases, following Englund paper.

# We will define the following for h increasing with temperature
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))
# and the following for h decreasing with temperature (so, the above function reflected about T=T_ref, for simplicity)
#p[XX]*exp((p[X]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))

#C eating R will be constant at 0.3

## Baseline model
@everywhere function LV_model_T_death_attack(du,u,p,t) # before (t,u,p,du)
    # R
    du[1] = p[1]*exp((0.5/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*(1-u[1]/(p[2]*exp((-0.3/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273))))) -
            p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2])
    # C
    du[2] = p[6]*exp((p[23]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[2]/(1+p[3]*exp((p[18]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[11]*exp((p[21]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]) -
            p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[9]*exp((p[14]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]
    # T
    du[3] = p[7]*exp((p[24]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[1]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) +
            p[8]*exp((p[25]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[2]*u[3]/(1+p[4]*exp((p[19]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[12]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[1]+p[5]*exp((p[20]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*p[13]*exp((p[22]/(8.62*10.0^-5))*(-1/(p[16]+273)+1/(p[17]+273)))*u[2]) -
            p[10]*exp((p[15]/(8.62*10.0^-5))*(1/(p[16]+273)-1/(p[17]+273)))*u[3]

end
# Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
#                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
#                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
#                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]

###
# Differences in density with Temperature across Temperature sensitivity
Temp_n=30#60
Ea_n=70

Temp = collect(range(15,stop=30,length= Temp_n ));
Ea_Pred = collect(range(0,stop=1,length= Ea_n));
combin_N = reshape([[x,y] for x in Ea_Pred, y in Temp],Temp_n*Ea_n,1);
Pred_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Pred_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Pred_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Int_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Int_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_max_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_max_3 = SharedArray{Float64}(Temp_n,Ea_n);
Res_min_1 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_2 = SharedArray{Float64}(Temp_n,Ea_n);Res_min_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_3 = SharedArray{Float64}(Temp_n,Ea_n);
TL_mean_1 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_2 = SharedArray{Float64}(Temp_n,Ea_n);TL_mean_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_CT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_CT_3 = SharedArray{Float64}(Temp_n,Ea_n);
Prop_RT_1 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_2 = SharedArray{Float64}(Temp_n,Ea_n);Prop_RT_3 = SharedArray{Float64}(Temp_n,Ea_n);


#pf_evol = ParameterizedFunction(parameterized_LV_II_evol_TO,p);
u0 = [2.0;1;1];   # [R,C,T]
tspan = (0.0,10000);
burnin=4000;
Carrying=5
@time  for i in 1:Temp_n
    @sync @distributed for j in 1:Ea_n

        # Parameter values are as: [1=r,2=K,3=a_RC1,4=a_RC2,5=a_C1C2,6=e_RC1,7=e_RC2
        #                          8=e_C1C2,9=d_C1,10=d_C2,11=h_RC1, 12=h_RC2, 13=h_C1C2
        #                           14=EaC, 15 = EaT, 16= Tref, 17=Temp,
        #                              18=EaCattR, 19=EaTattR, 20=EaTattC, 21=CHandlingEa, 22=THandlingEa]
                # We assume that the sensitivity of the death rates is equal, but not too high (= 0.2). Top predator varies from 0.1 to 0.5
            #p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.2,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5,0.5,0.5];  # For variable grazer
            p_1 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.2,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5,0,-0.5,-0.5]; # For variable Predator
            prob_1 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_1) #,callback=cb_1
            sol_1 = solve(prob_1, adaptive=false,dt=0.075) #Reduced step size for speed
            #p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5,0.5,0.5];  # For variable grazer
            p_2 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.5,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5,-0.5,0,0]; # For variable Predator
            prob_2 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_2) #,callback=cb_2
            sol_2 = solve(prob_2, adaptive=false,dt=0.075)
            #p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.8,0.5,20,Temp[i],Ea_Pred[j],0.5,0.5,0.5,0.5];  # For variable grazer
            p_3 = [1.5,Carrying,1,1,1,0.8,0.2,1,0.8,0.8,0.4,0.2,0.2,0.5,0.8,20,Temp[i],0.5,Ea_Pred[j],Ea_Pred[j],0.5,0.5,-0.5,-0.5,-0.5]; # For variable Predator
            prob_3 = ODEProblem(LV_model_T_death_attack,u0,tspan,p_3) #,callback=cb_3
            sol_3 = solve(prob_3, adaptive=false,dt=0.075)

            # We ask whether every species is alive in the last time step of "sol"
            sol_plot_1 = hcat(sol_1.u...)'
            sol_plot_2 = hcat(sol_2.u...)'
            sol_plot_3 = hcat(sol_3.u...)'

            # Store mins and max
            Pred_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,3]);Pred_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,3]);Pred_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,3]);
            #Pred_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,3]);Pred_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,3]);Pred_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,3]);
            #Pred_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,3]);Pred_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,3]);Pred_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,3]);
            Int_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,2]);Int_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,2]);Int_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,2]);
            #Int_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,2]);Int_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,2]);Int_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,2]);
            #Int_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,2]);Int_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,2]);Int_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,2]);
            Res_mean_1[i,j] = geomean(sol_plot_1[(end-burnin):end,1]);Res_mean_2[i,j] = geomean(sol_plot_2[(end-burnin):end,1]);Res_mean_3[i,j] = geomean(sol_plot_3[(end-burnin):end,1]);
            #Res_max_1[i,j] = maximum(sol_plot_1[(end-burnin):end,1]);Res_max_2[i,j] = maximum(sol_plot_2[(end-burnin):end,1]);Res_max_3[i,j] = maximum(sol_plot_3[(end-burnin):end,1]);
            #Res_min_1[i,j] = minimum(sol_plot_1[(end-burnin):end,1]);Res_min_2[i,j] = minimum(sol_plot_2[(end-burnin):end,1]);Res_min_3[i,j] = minimum(sol_plot_3[(end-burnin):end,1]);

            #Calculate TL for top predator following Gibert & Yeakel 2019
            TL_1[i,j] = 1 + (p_1[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*exp((p_1[25]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j])) +
            2*(p_1[8]*exp((p_1[25]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))/(p_1[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Res_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]) + p_1[8]*exp((p_1[25]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*Int_mean_1[i,j]*Pred_mean_1[i,j]/(1+p_1[4]*exp((p_1[19]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[12]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Res_mean_1[i,j]+p_1[5]*exp((p_1[20]/(8.62*10.0^-5))*(1/(p_1[16]+273)-1/(p_1[17]+273)))*p_1[13]*exp((p_1[22]/(8.62*10.0^-5))*(-1/(p_1[16]+273)+1/(p_1[17]+273)))*Int_mean_1[i,j]))

            TL_2[i,j] = 1 + (p_2[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*exp((p_2[25]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j])) +
            2*(p_2[8]*exp((p_2[25]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))/(p_2[7]*exp((p_1[24]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Res_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]) + p_2[8]*exp((p_2[25]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*Int_mean_2[i,j]*Pred_mean_2[i,j]/(1+p_2[4]*exp((p_2[19]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[12]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Res_mean_2[i,j]+p_2[5]*exp((p_2[20]/(8.62*10.0^-5))*(1/(p_2[16]+273)-1/(p_2[17]+273)))*p_2[13]*exp((p_2[22]/(8.62*10.0^-5))*(-1/(p_2[16]+273)+1/(p_2[17]+273)))*Int_mean_2[i,j]))

            TL_3[i,j] = 1 + (p_3[7]*exp((p_3[24]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*exp((p_3[24]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*exp((p_3[25]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j])) +
            2*(p_3[8]*exp((p_3[25]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))/(p_3[7]*p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Res_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]) + p_3[8]*exp((p_3[25]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*Int_mean_3[i,j]*Pred_mean_3[i,j]/(1+p_3[4]*exp((p_3[19]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[12]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Res_mean_3[i,j]+p_3[5]*exp((p_3[20]/(8.62*10.0^-5))*(1/(p_3[16]+273)-1/(p_3[17]+273)))*p_3[13]*exp((p_3[22]/(8.62*10.0^-5))*(-1/(p_3[16]+273)+1/(p_3[17]+273)))*Int_mean_3[i,j]))

    end
    println(i)
end

## Pass data to R
R"
Diff_1 <- $Int_max_1 - $Pred_max_1
Diff_min_1 <- $Int_min_1 - $Pred_min_1
Diff_mean_1 <- $Int_mean_1 - $Pred_mean_1
Diff_2 <- $Int_max_2 - $Pred_max_2
Diff_min_2 <- $Int_min_2 - $Pred_min_2
Diff_mean_2 <- $Int_mean_2 - $Pred_mean_2
Diff_3 <- $Int_max_3 - $Pred_max_3
Diff_min_3 <- $Int_min_3 - $Pred_min_3
Diff_mean_3 <- $Int_mean_3 - $Pred_mean_3
Diff_Ea <- $Ea_Pred - 0.3

Prop_Basal_1 <- $Res_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Int_1 <- $Int_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)
Prop_Pred_1 <- $Pred_mean_1 /($Res_mean_1 + $Int_mean_1 + $Pred_mean_1)

Prop_Basal_2 <- $Res_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Int_2 <- $Int_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)
Prop_Pred_2 <- $Pred_mean_2 /($Res_mean_2 + $Int_mean_2 + $Pred_mean_2)

Prop_Basal_3 <- $Res_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Int_3 <- $Int_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)
Prop_Pred_3 <- $Pred_mean_3 /($Res_mean_3 + $Int_mean_3 + $Pred_mean_3)

color <- colorRampPalette(brewer.pal(8,'YlOrRd'))(61)
"

#### PLOT RESULTS

#----------------------------------------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------------------------------------
## HEAT MAP of relative abundances

combin = hcat(combin_N...)'
Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);

# For grazer varying version all arrays need to be reversed so x axis represents the same information as in scenario where predator varies
#combin_New = reshape([[x,y] for x in reverse(Ea_Pred,dims=1), y in Temp],Temp_n*Ea_n,1)
#combin = hcat(combin_New...)'
#Pred_mean_12 = hcat(Pred_mean_1'...);Pred_mean_22 = hcat(Pred_mean_2'...);Pred_mean_32 = hcat(Pred_mean_3'...);
#Int_mean_12 = hcat(Int_mean_1'...);Int_mean_22 = hcat(Int_mean_2'...);Int_mean_32 = hcat(Int_mean_3'...);
#Res_mean_12 = hcat(Res_mean_1'...);Res_mean_22 = hcat(Res_mean_2'...);Res_mean_32 = hcat(Res_mean_3'...);
#TL_12 = hcat(TL_1'...);TL_22 = hcat(TL_2'...);TL_32 = hcat(TL_3'...);
#TL_12 = ifelse.(isnan.(TL_12), 3.0, TL_12) # Run only for grazers mor sensitive


## Prep data
R"
res_extant_1 <- $Res_mean_12 > 0.01
top_extinct_1 <- $Pred_mean_12 < 0.01   # Predator goes extinct;
int_extinct_1 <- $Int_mean_12 < 0.01    # Intermediate goes extinct;

res_extant_2 <- $Res_mean_22 > 0.01
top_extinct_2 <- $Pred_mean_22 < 0.01   # Predator goes extinct;
int_extinct_2 <- $Int_mean_22 < 0.01    # Intermediate goes extinct;

res_extant_3 <- $Res_mean_32 > 0.01
top_extinct_3 <- $Pred_mean_32 < 0.01   # Predator goes extinct;
int_extinct_3 <- $Int_mean_32 < 0.01    # Intermediate goes extinct;

# CHANGE THIS TO EITHER Res_mean2 (basal resource), Int_mean2 (Intermediate predator) or Pred_mean2 (top predators) to get plots for each species.
TRes_ratio_Pred_1 <- $Pred_mean_12; TRes_ratio_Int_1 <- $Int_mean_12; TRes_ratio_Res_1 <- $Res_mean_12
TRes_ratio_Pred_2 <- $Pred_mean_22; TRes_ratio_Int_2 <- $Int_mean_22; TRes_ratio_Res_2 <- $Res_mean_22
TRes_ratio_Pred_3 <- $Pred_mean_32; TRes_ratio_Int_3 <- $Int_mean_32; TRes_ratio_Res_3 <- $Res_mean_32


### Only needed for variable grazer for plotting so color code spans range of variation
# Here, we eliminate values for the Resource below 2.15 because in thar range of parameters, that can only be achieved for parameter space
    # for which the predator goes extinct. If we don't specify this, the range of colors shown in the figure is more limited but the results are the same.
        #For a different combination of parameters, It may be necessary to change the maximum allowed to something else.
# For Int
TRes_ratio_Int_1 <- rep(0,length($Int_mean_12));TRes_ratio_Int_2 <- rep(0,length($Int_mean_22));TRes_ratio_Int_3 <- rep(0,length($Int_mean_32))
for(i in 1:length($Int_mean_12)){if($Int_mean_12[i]<0.4){TRes_ratio_Int_1[i] <- NA}else{TRes_ratio_Int_1[i] <- $Int_mean_12[i]}}
for(i in 1:length($Int_mean_22)){if($Int_mean_22[i]<0.4){TRes_ratio_Int_2[i] <- NA}else{TRes_ratio_Int_2[i] <- $Int_mean_22[i]}}
for(i in 1:length($Int_mean_32)){if($Int_mean_32[i]<0.4){TRes_ratio_Int_3[i] <- NA}else{TRes_ratio_Int_3[i] <- $Int_mean_32[i]}}

# We do the same for TL
TL_12 <- rep(0,length($TL_12));TL_22 <- rep(0,length($TL_12));TL_32 <- rep(0,length($TL_12))
for(i in 1:length($TL_12)){if($TL_12[i]<2.5){TL_12[i] <- NA}else{TL_12[i] <- $TL_12[i]}}
for(i in 1:length($TL_22)){if($TL_22[i]<2.5){TL_22[i] <- NA}else{TL_22[i] <- $TL_22[i]}}
for(i in 1:length($TL_32)){if($TL_32[i]<2.5){TL_32[i] <- NA}else{TL_32[i] <- $TL_32[i]}}

"

# 1)
## ABUNDANCE PLOT
R"
### RESOURCE
blues <- colorRampPalette(brewer.pal(8,'Set3'))(8)
Yl <- my_palette <- colorRampPalette(c('blue','yellow'))(n = 299)

plotvar <- TRes_ratio_Res_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Res_1,TRes_ratio_Res_2,TRes_ratio_Res_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Res_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

png(filename='/Users/jeanphi/Desktop/JP/Papers_in_review_submitted/JP_Tony_Temp_TL/Manuscript/Figures/Revision_3/Appendix_3/Fig_S11.png', ## <<<===
    units='in',width=7,height=7,pointsize=12,res=1200)
par(oma=c(1,1,0,0),mai=c(0.1,0.1,0.1,0.2),mfrow=c(4,3))

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Res_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Res_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## INTERMEDIATE

#plotvar <- TRes_ratio_Int_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Int_1,TRes_ratio_Int_2,TRes_ratio_Int_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Int_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Int_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

#plotvar <- TRes_ratio_Int_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Int_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

## TOP PREDATOR

plotvar <- TRes_ratio_Pred_1 ## <<<===
nclr <- 15
min <- min(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
max <- max(c(TRes_ratio_Pred_1,TRes_ratio_Pred_2,TRes_ratio_Pred_3),na.rm=TRUE)
breaks <- (max - min)/nclr
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
class <- classIntervals(TRes_ratio_Pred_1, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_1,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_2 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_2, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_2,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

plotvar <- TRes_ratio_Pred_3 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'YlGnBu'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TRes_ratio_Pred_3, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.3, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)
#points($combin[top_larger_int_3,], pch=15,cex=1.3, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.3, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.3, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.3, col=blues[6]) #Not the focus of this paper because the food web changes qualitatively anyways (loss of top predator)
#abline(0,1, lwd=2)

# 2)
## TROPHIC LEVEL PLOT

# Int mort more sensitive
## Mort
nclr <- 15
min <- min(c(TL_12,TL_22,TL_32),na.rm=TRUE)
max <- max(c(TL_12,TL_22,TL_32),na.rm=TRUE)
breaks <- (max - min)/nclr
# Int mort more sensitive
## Mort
plotvar <- TL_12 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_12, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_1,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_1,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_1,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_1,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Equally sensitive mort

## Mort
plotvar <- TL_22 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_22, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_2,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_2,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_2,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_2,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

# Top mortality more more sensitive
## Mort
plotvar <- TL_32 ## <<<===
plotclr <- colorRampPalette(brewer.pal(nclr,'Blues'))(100)
#plotclr <- plotclr[nclr:1] # reorder colors
class <- classIntervals(TL_32, nclr, style='fixed',fixedBreaks = seq(min, max, breaks)) ## <<<===
colcode <- findColours(class, plotclr)

plot($combin[res_extant_1,], pch=15,cex=1.1, col=colcode, ## <<<===
las = TRUE, axes=FALSE, ylab='', xlab='')
box(lwd=2)
axis(1,at=seq(0,1, by=0.5),labels=c(-0.5,0,0.5), tck=0.015, cex.axis=1, lwd.ticks=2,mgp=c(3, .5, 0))
axis(2,at=seq(15,30, by=5), tck=0.015, las=TRUE, cex.axis=1,lwd.ticks=2,mgp=c(3, .5, 0))
#mtext(TeX('Top predator tradeoff ($\\gamma_{CT}$)'),1, line=2.7, cex=1.8)
#mtext(TeX('Consumer tradeoff ($\\gamma_{RC}$)'),2,line=2.5, cex=1.8)

#points($combin[top_larger_int_3,], pch=15,cex=1.1, col=blues[2]) ## <<<===
points($combin[top_extinct_3,], pch=15,cex=1.1, col='grey87') ## <<<===
#points($combin[int_extinct_3,], pch=15,cex=1.1, col='black') ## <<<===
#points($combin[int_larger_res_3,], pch=15,cex=1.1, col=blues[6]) ## <<<===
#abline(0,1, lwd=2)

dev.off()
"


